// <auto-generated />
using System;
using MeetAndGoApi.BusinessLayer.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeetAndGoApi.Migrations
{
    [DbContext(typeof(MeetAndGoContext))]
    partial class MeetAndGoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeetAndGo.Shared.Models.CommentModel", b =>
                {
                    b.Property<Guid>("CommentModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorMemberModelId");

                    b.Property<DateTimeOffset>("CommentedIn");

                    b.Property<Guid?>("EventModelId");

                    b.Property<string>("Text");

                    b.HasKey("CommentModelId");

                    b.HasIndex("AuthorMemberModelId");

                    b.HasIndex("EventModelId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.EventModel", b =>
                {
                    b.Property<Guid>("EventModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CurrencyCode");

                    b.Property<string>("Description");

                    b.Property<int>("EventState");

                    b.Property<double>("ExpectedRating");

                    b.Property<int>("MaxSeats");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("StartTime");

                    b.Property<double>("TotalPrice");

                    b.Property<int>("Transport");

                    b.HasKey("EventModelId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.MemberModel", b =>
                {
                    b.Property<Guid>("MemberModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompressedPhotoUrl");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid?>("EventModelId");

                    b.Property<string>("FirstName");

                    b.Property<string>("HighQualityPhoto");

                    b.Property<string>("LastName");

                    b.Property<double>("MemberRating");

                    b.Property<double>("OrganizerRating");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("MemberModelId");

                    b.HasIndex("EventModelId");

                    b.ToTable("Members");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MemberModel");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.PointModel", b =>
                {
                    b.Property<Guid>("PointModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EventModelId");

                    b.Property<double>("Lat");

                    b.Property<double>("Long");

                    b.Property<string>("Name");

                    b.HasKey("PointModelId");

                    b.HasIndex("EventModelId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.VoteModel", b =>
                {
                    b.Property<Guid>("VoteModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<double>("Rating");

                    b.Property<int>("RatingType");

                    b.Property<Guid?>("TargetMemberModelId");

                    b.Property<Guid?>("UserModelMemberModelId");

                    b.Property<Guid?>("VoterMemberModelId");

                    b.HasKey("VoteModelId");

                    b.HasIndex("TargetMemberModelId");

                    b.HasIndex("UserModelMemberModelId");

                    b.HasIndex("VoterMemberModelId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.UserModel", b =>
                {
                    b.HasBaseType("MeetAndGo.Shared.Models.MemberModel");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("LanguageCode");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserModelId");

                    b.ToTable("UserModel");

                    b.HasDiscriminator().HasValue("UserModel");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.CommentModel", b =>
                {
                    b.HasOne("MeetAndGo.Shared.Models.MemberModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorMemberModelId");

                    b.HasOne("MeetAndGo.Shared.Models.EventModel", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventModelId");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.MemberModel", b =>
                {
                    b.HasOne("MeetAndGo.Shared.Models.EventModel")
                        .WithMany("Members")
                        .HasForeignKey("EventModelId");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.PointModel", b =>
                {
                    b.HasOne("MeetAndGo.Shared.Models.EventModel")
                        .WithMany("Direction")
                        .HasForeignKey("EventModelId");
                });

            modelBuilder.Entity("MeetAndGo.Shared.Models.VoteModel", b =>
                {
                    b.HasOne("MeetAndGo.Shared.Models.MemberModel", "Target")
                        .WithMany()
                        .HasForeignKey("TargetMemberModelId");

                    b.HasOne("MeetAndGo.Shared.Models.UserModel")
                        .WithMany("Votes")
                        .HasForeignKey("UserModelMemberModelId");

                    b.HasOne("MeetAndGo.Shared.Models.MemberModel", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterMemberModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
